#!/bin/python3

# This script will remove permissions from all ami's that match the filter. Use
# this to cleanup any permissions that were incorrectly added.
# For example, look for all AMIs that are generated by AWSBackup and remove
# permissions from them, this was a real world example after the AMI sharing
# function was sharing out all AMIs and was not filtering correctly.

import boto3
import os
import logging

image_prefix = "AwsBackup*"  # Set this to change the filter, used like AMI start with

client = boto3.client('ec2')

# put lambda in shared services account and try to call it from there

LOGGER = logging.getLogger()
if "log_level" in os.environ:
    LOGGER.setLevel(os.environ["log_level"])
    LOGGER.info("Log level set to %s" % LOGGER.getEffectiveLevel())
else:
    LOGGER.setLevel(logging.INFO)
logging.getLogger("boto3").setLevel(logging.INFO)
logging.getLogger("botocore").setLevel(logging.INFO)

# Get all AMIs that are AwsBackup
response = client.describe_images(
    Owners=['self'],
    Filters=[
        {
            'Name': 'name',
            'Values': [image_prefix]
        }
    ]
)
# Loop through all the amis and unshare the ones that are expired
for image in response['Images']:
    ami_name = image['Name']
    print(ami_name)

    image_attribute_response = client.describe_image_attribute(
        Attribute='launchPermission',
        ImageId=image['ImageId']
    )

    for launch_permission in image_attribute_response['LaunchPermissions']:
        print("%s - remove %s" % (ami_name, launch_permission['UserId']))
        response = client.modify_image_attribute(
            Attribute=('launchPermission'),
            ImageId=image['ImageId'],
            LaunchPermission={
                'Remove': [{'UserId': launch_permission['UserId']}]
            }
        )
